{"version":3,"sources":["SplashSection.tsx","SkillsComponent.tsx","ProjectsComponent.tsx","ContactComponent.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["particlesParam","ParticlesParam","SplashSection","console","log","className","width","height","params","SkillsComponent","alt","src","ProjectsComponent","ContactComponent","action","method","type","name","required","rows","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wWAMMA,EAAiBC,EAuBRC,EArBkB,WAE/B,OADAC,QAAQC,IAAIH,GAEV,yBAAKI,UAAU,iBACb,kBAAC,IAAD,CAAgBA,UAAU,iBAAiBC,MAAM,OAAOC,OAAO,OAAOC,OAAQR,IAC9E,yBAAKK,UAAU,yBACb,2DACA,qCACQ,8BACJ,kBAAC,IAAD,KACE,2CACA,0CACA,8CALN,sBC2BOI,G,MAvCmB,WAChC,OACE,yBAAKJ,UAAU,mBACb,gDACA,6BACE,yBAAKK,IAAI,GAAGC,IAAI,yCAChB,yBAAKD,IAAI,GAAGC,IAAI,wCAChB,yBAAKD,IAAI,GAAGC,IAAI,oBAChB,yBAAKD,IAAI,GAAGC,IAAI,wCAChB,yBAAKD,IAAI,GAAGC,IAAI,kDAChB,yBAAKD,IAAI,GAAGC,IAAI,2CAElB,6BACE,yBAAKD,IAAI,GAAGC,IAAI,6CAChB,yBAAKD,IAAI,GAAGC,IAAI,+BAChB,yBAAKD,IAAI,GAAGC,IAAI,+BAChB,yBAAKD,IAAI,GAAGC,IAAI,4BAElB,6BACE,yBAAKD,IAAI,GAAGC,IAAI,2BAChB,yBAAKD,IAAI,GAAGC,IAAI,4BAChB,yBAAKD,IAAI,GAAGC,IAAI,2BAChB,yBAAKD,IAAI,GAAGC,IAAI,+BAChB,yBAAKD,IAAI,GAAGC,IAAI,2BAChB,yBAAKD,IAAI,GAAGC,IAAI,8BAElB,6BACE,yBAAKD,IAAI,GAAGC,IAAI,4BAChB,yBAAKD,IAAI,GAAGC,IAAI,+BAChB,yBAAKD,IAAI,GAAGC,IAAI,6BAChB,yBAAKD,IAAI,GAAGC,IAAI,6BAChB,yBAAKD,IAAI,GAAGC,IAAI,0BAChB,yBAAKD,IAAI,GAAGC,IAAI,4BAChB,yBAAKD,IAAI,GAAGC,IAAI,6BC1BTC,EARqB,WAClC,OACE,yBAAKP,UAAU,qBACb,oDCiBSQ,G,MAnBoB,WACjC,OACE,yBAAKR,UAAU,oBACb,0CACA,0BAAMA,UAAU,eAAeS,OAAO,wCAAwCC,OAAO,QAArF,QAEE,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,UAAQ,IAFzC,SAIE,2BAAOF,KAAK,QAAQE,UAAQ,IAJ9B,WAME,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,UAAQ,IAN5C,WAQE,8BAAUD,KAAK,UAAUE,KAAM,EAAGD,UAAQ,IAC1C,4BAAQF,KAAK,UAAb,cCEOI,EAXO,WACpB,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.c9d5bcec.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactParticles from 'react-particles-js';\r\nimport ParticlesParam from './ParticlesParam.json';\r\nimport './SplashSection.css';\r\nimport TextLoop from 'react-text-loop';\r\n\r\nconst particlesParam = ParticlesParam as any;\r\n\r\nconst  SplashSection: React.FC = () => {\r\n  console.log(ParticlesParam);\r\n  return (\r\n    <div className='SplashSection'>\r\n      <ReactParticles className='ReactParticles' width='100%' height='100%' params={particlesParam} />\r\n      <div className='SplashSection-content'>\r\n        <h2>Howdy! I'm Warren Schrader.</h2>\r\n        <h3>\r\n          I'm a <span>\r\n            <TextLoop>\r\n              <span>front-end</span>\r\n              <span>back-end</span>\r\n              <span>full-stack</span>\r\n            </TextLoop> \r\n          </span> web developer.\r\n        </h3>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SplashSection;","import React from 'react';\r\nimport './SkillsComponent.css';\r\n\r\nconst SkillsComponent: React.FC = () => {\r\n  return (\r\n    <div className='SkillsComponent'>\r\n      <h3>Skills Component</h3>\r\n      <div>\r\n        <img alt='' src='./images/HTML5_logo_and_wordmark.svg' />\r\n        <img alt='' src='./images/CSS3_logo_and_wordmark.svg' />\r\n        <img alt='' src='./images/js.png' />\r\n        <img alt='' src='./images/express-facebook-share.png' />\r\n        <img alt='' src='./images/iconfinder_react.js_logo_1174949.svg'/>\r\n        <img alt='' src='./images/nodejs-new-pantone-black.png' />\r\n      </div>\r\n      <div>\r\n        <img alt='' src='./images/mongodb-logo-rgb-j6w271g1xn.jpg' />\r\n        <img alt='' src='./images/Boostrap_logo.svg' />\r\n        <img alt='' src='./images/mongoose-logo.png' />\r\n        <img alt='' src='./images/socket-io.svg' />\r\n      </div>\r\n      <div>\r\n        <img alt='' src='./images/jest-logo.svg' />\r\n        <img alt='' src='./images/mocha-logo.svg' />\r\n        <img alt='' src='./images/chai-logo.png' />\r\n        <img alt='' src='./images/passport-logo.png' />\r\n        <img alt='' src='./images/Java_logo.svg' />\r\n        <img alt='' src='./images/sqlite-logo.svg' />\r\n      </div>\r\n      <div>\r\n        <img alt='' src='./images/Redis_Logo.svg' />\r\n        <img alt='' src='./images/firebase-logo.svg' />\r\n        <img alt='' src='./images/heroku-logo.svg' />\r\n        <img alt='' src='./images/github-logo.png' />\r\n        <img alt='' src='./images/Git-logo.svg' />\r\n        <img alt='' src='./images/redux-logo.png' />\r\n        <img alt='' src='./images/angular.svg' />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SkillsComponent;\r\n","import React from 'react';\r\n\r\nconst ProjectsComponent: React.FC = () => {\r\n  return (\r\n    <div className='ProjectsComponent'>\r\n      <h3>Projects Component</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProjectsComponent;\r\n","import React from 'react';\r\nimport './ContactComponent.css';\r\n\r\nconst ContactComponent: React.FC = () => {\r\n  return (\r\n    <div className='ContactComponent'>\r\n      <h3>Contact Me</h3>\r\n      <form className='contact-form' action=\"https://formspree.io/email@domain.tld\" method=\"POST\">\r\n        Name:\r\n        <input type='text' name='name' required/>\r\n        Email:\r\n        <input type='email' required/>\r\n        Subject:\r\n        <input type='text' name='subject' required/>\r\n        Message:\r\n        <textarea name='message' rows={5} required/>\r\n        <button type='submit'>Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContactComponent;\r\n","import React from 'react';\nimport './App.css';\nimport SplashSection from './SplashSection';\nimport SkillsComponent from './SkillsComponent';\nimport ProjectsComponent from './ProjectsComponent';\nimport ContactComponent from './ContactComponent';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <SplashSection />\n      <SkillsComponent />\n      <ProjectsComponent />\n      <ContactComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}